<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiana.mybatis.dao.EmployeeMapper">
    <cache type="org.mybatis.caches.ehcache.EhcacheCache" >
        <property name="timeToIdleSeconds" value="3600"/>
        <property name="timeToLiveSeconds" value="3600"/>
        <!-- 同ehcache参数maxElementsInMemory -->
        <property name="maxEntriesLocalHeap" value="1000"/>
        <!-- 同ehcache参数maxElementsOnDisk -->
        <property name="maxEntriesLocalDisk" value="10000000"/>
        <property name="memoryStoreEvictionPolicy" value="LRU"/>
    </cache>
    <!--<cache eviction="FIFO" flushInterval="30000" readOnly="false" size="200" ></cache>-->
    <!--
    eviction:缓存的回收策略
        LRU（默认）、FIFO、SOFT、WEAK
    flushInterval:缓存刷新间隔
        缓存多长时间清空一次，默认不清空，设置一个毫秒值
        true：只读：mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据
                    mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快
        false（默认）：非只读：mybatis觉得获取的数据会被修改。
                        mybatis会利用序列化与反序列化技术克隆一份新的数据给你。安全，速度慢
        size：缓存存放多少元素
        type=“”，指定自定义缓存的全类名.
            实现Cache接口即可
    -->

    <select id="getEmployeeById" resultType="emp">
         select * from tbl_employee where id = #{id}
    </select>

    <select id="getEmployeeCount" resultType="Integer">
         select count(*) from tbl_employee
    </select>

    <select id="getEmployeeByIdAndLastName" resultType="emp">
         select * from tbl_employee where id = #{id} and last_name = #{lastName}
    </select>

    <select id="getEmployeeByDeptId" resultType="emp">
         select * from tbl_employee where dept_id=#{deptId}
    </select>

    <!--使用useGeneratedKeys自增主键值-->
    <insert id="addEmployee" useGeneratedKeys="true" keyProperty="id">
        insert into tbl_employee(
            <include refid="insertColumn"></include>
        ) values(#{lastName},#{email},#{gender})
    </insert>
    <update id="updateEmployee">
        update tbl_employee set `last_name`=#{lastName},`email`=#{email},`gender`=#{gender} where id=#{id}
    </update>
    <delete id="deleteEmployee">
        delete from tbl_employee where id = #{id}
    </delete>

    <select id="getEmployeeByName" resultType="emp">
        select * from tbl_employee where last_name like #{lastName}
    </select>

    <!--以id为key值-->
    <select id="getEmployeeIndexId" resultType="emp">
        select * from tbl_employee where last_name like #{lastName}
    </select>


    <resultMap id="employeeAndDept" type="emp">
        <id column="id" property="id"></id>
        <result column="last_name" property="lastName"></result>
        <result column="email" property="email"></result>
        <result column="gender" property="gender"></result>
<!--        <result column="did" property="department.id"></result>-->
<!--        <result column="departmentName" property="department.departmentName"></result>-->
        <association property="department" javaType="com.xiana.mybatis.bean.Department">
            <id column="did" property="id"></id>
            <result column="departmentName" property="departmentName"></result>
        </association>
    </resultMap>
    <select id="getEmployeeAndDeptById" resultMap="employeeAndDept">
        select e.*,d.id as did,d.dept_name departmentName from tbl_employee e,tbl_dept d where e.dept_id=d.id and e.id=#{id}
    </select>


    <resultMap id="employeeStep" type="emp">
        <id column="id" property="id"></id>
        <result column="last_name" property="lastName"></result>
        <result column="email" property="email"></result>
        <result column="gender" property="gender"></result>
        <discriminator javaType="String" column="gender">
            <case value="0" resultType="emp">
                <association property="department" select="com.xiana.mybatis.dao.DepartmentMapper.getDepartmentById" column="dept_id"></association>
            </case>
            <case value="1" resultType="emp">
                <id column="id" property="id"></id>
                <result column="email" property="lastName"></result>
                <result column="email" property="email"></result>
                <result column="gender" property="gender"></result>
            </case>
        </discriminator>
    </resultMap>
    <select id="getEmployeeStep" resultMap="employeeStep">
        select * from tbl_employee where id = #{id}
    </select>

    <select id="getEmployeeByCondition" resultType="emp">
        select * from tbl_employee
        <bind value="'%'+lastName+'%'" name="_lastName"></bind>
        <where>
            <if test="id != null ">
                id = #{id}
            </if>
            <if test="email != null ">
                and email = #{email}
            </if>
            <if test="lastName != null and lastName != ''">
                and last_name LIKE #{_lastName}
            </if>
            <if test="gender == 1 or gender == 0">
                and gender = #{gender}
            </if>
        </where>
    </select>

    <select id="getEmployeeByIn" resultType="emp">
        select * from tbl_employee where id in
        <foreach collection="list" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
    </select>
    
    <sql id="insertColumn">
        `last_name`,`email`,`gender`
    </sql>
</mapper>